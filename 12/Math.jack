// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

	static array pwrs;

    /** Initializes the library. */
    function void init() {
	var int counter, power_of_two;
	
	let pwrs = Array.new(16);

	let counter = 0;
	let power_of_two = 1;

	while (counter < 16){
		let pwrs[counter] = power_of_two;
		let counter = counter + 1;
		let power_of_two = power_of_two + power_of_two;
		
	}

	return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
	
	if (x < 0) {return -x;} else {return x;}
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
	
	var int sum, shiftedx, counter;

	let sum = 0;
	let counter = 0;
	let shiftedx = x;

	while (counter < 16){
		if (pwrs[counter] & y){
			let sum = sum + shiftedx;
		}
		let counter = counter + 1;
		let shiftedx = shiftedx + shiftedx;
	}
	return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {

	var int q, abs_x, abs_y;
	var int solution;
	
	let abs_x = Math.abs(x);
	let abs_y = Math.abs(y);

	if (abs_y > abs_x) {return 0;}

	let q = Math.divide(abs_x, abs_y + abs_y);
	if ((abs_x - (q * abs_y * 2)) < abs_y){
		let solution = q + q;
	}else { 
		let solution = q + q + 1;
	}

	if ((x < 0 & y > 0) | (x > 0 & y < 0)) {
		return -solution;
	} else {
		return solution;
	}
	
	
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
	
	var int y, j, exp_1, exp_2;

	let y = 0;
	let j = 7;
	while (j > -1){
		let exp_1 = y + pwrs[j];
		let exp_2 = exp_1 * exp_1;
		if ((exp_2 > 0) & ~(exp_2 > x)){
			let y = exp_1;
		}
		let j = j - 1;
	}
	return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {

	if (a > b) {return a;} else {return b;}
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {

	if (a < b) {return a;} else {return b;}
    }
}
